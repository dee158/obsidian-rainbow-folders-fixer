/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var b=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var T=Object.prototype.hasOwnProperty;var E=(l,i)=>{for(var s in i)b(l,s,{get:i[s],enumerable:!0})},F=(l,i,s,t)=>{if(i&&typeof i=="object"||typeof i=="function")for(let e of A(i))!T.call(l,e)&&e!==s&&b(l,e,{get:()=>i[e],enumerable:!(t=x(i,e))||t.enumerable});return l};var N=l=>F(b({},"__esModule",{value:!0}),l);var C={};E(C,{default:()=>g});module.exports=N(C);var o=require("obsidian"),O={max:"10",name:"foldernumber",recursive:!1},g=class extends o.Plugin{constructor(){super(...arguments);this.elObserver=new MutationObserver(s=>{s.forEach(t=>{t.type==="childList"&&(t.addedNodes.forEach(e=>{e instanceof Element&&e.matches(".nav-folder")&&this.applycolorinfo()}),t.removedNodes.forEach(e=>{e instanceof Element&&e.matches(".nav-folder")&&this.applycolorinfo()}))})});this.attrObserver=new MutationObserver(s=>{s.forEach(t=>{t.type==="attributes"&&this.applycolorinfo()})});this.allfolders=[]}applycolorinfo(){let s=Number(this.settings.max),t=[],e=[],h={},p=[],u=[],m={},w=`data-${this.settings.name}`,S=[];for(let n of this.allfolders)if(n.parent)if(n.parent.path=="/")e.push(n.name.toLowerCase()),h[n.name.toLowerCase()]=n.name;else{u.push(n.path),m[n.path.toLowerCase()]=n.path;let a=n.path.lastIndexOf(n.name),r=n.path.substring(0,a);p.includes(r)||p.push(r)}e.sort();let d=0;for(let n of e)d++,d>s&&(d=1),t.push({path:h[n],num:d});p.sort((n,a)=>a.length-n.length);for(let n of p){let a=[],r=u.length-1;for(let c=r;c>=0;c--){let v=u[c];v.startsWith(n)&&v.length>n.length&&(a.push(v.toLowerCase()),u.splice(c,1))}a.sort();let f=0;for(let c of a)f++,f>s&&(f=1),this.settings.recursive?t.push({path:m[c],num:f}):S.push(m[c])}for(let n of t){let a=document.querySelector(`[data-path="${n.path}"]`);if(!a)continue;let r=a.parentElement;r&&r.setAttribute(w,n.num.toString())}for(let n of S){let a=document.querySelector(`[data-path="${n}"]`);if(!a)continue;let r=a.parentElement;r&&r.removeAttribute(w)}}async onload(){await this.loadSettings(),this.app.workspace.onLayoutReady(()=>{this.allfolders=this.app.vault.getAllFolders(),this.applycolorinfo();let s=document.querySelector(".nav-files-container");s&&this.elObserver.observe(s,{childList:!0,subtree:!0});let t=document.querySelector(".workspace-drawer.mod-left");t&&this.attrObserver.observe(t,{attributes:!0,childList:!1,subtree:!1}),this.registerEvent(this.app.vault.on("create",e=>{e instanceof o.TFolder&&(this.allfolders=this.app.vault.getAllFolders())})),this.registerEvent(this.app.vault.on("rename",e=>{e instanceof o.TFolder&&(this.allfolders=this.app.vault.getAllFolders())}))}),this.addSettingTab(new y(this.app,this))}onunload(){this.elObserver.disconnect(),this.attrObserver.disconnect();let s=this.app.vault.getAllFolders();for(let t of s){let e=document.querySelector(`[data-path="${t.path}"]`);if(!e)continue;let h=e.parentElement;h&&h.removeAttribute(`data-${this.settings.name}`)}}async loadSettings(){this.settings=Object.assign({},O,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},y=class extends o.PluginSettingTab{constructor(s,t){super(s,t);this.plugin=t}display(){let{containerEl:s}=this;s.empty(),new o.Setting(s).setName("Number of colors").setDesc("The maximum number of colors your rainbow folders cycle through before repeating.").addText(t=>t.setPlaceholder("10").setValue(this.plugin.settings.max).onChange(async e=>{let h=parseInt(e);isNaN(h)&&(h=1),this.plugin.settings.max=h.toString(),this.plugin.applycolorinfo(),await this.plugin.saveSettings()})),new o.Setting(s).setName("Attribute name").setDesc("The name of the attribute that will be added to the element. May need a restart to see changes.").addText(t=>t.setPlaceholder("foldernumber").setValue(this.plugin.settings.name).onChange(async e=>{this.plugin.settings.name=e,await this.plugin.saveSettings()})),new o.Setting(s).setName("Apply recursively").setDesc("Toggle on to also apply the new attribute so subfolders.").addToggle(t=>t.setValue(this.plugin.settings.recursive).onChange(async e=>{this.plugin.settings.recursive=e,this.plugin.applycolorinfo(),await this.plugin.saveSettings()}))}};
