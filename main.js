/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var b=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var N=Object.prototype.hasOwnProperty;var E=(r,o)=>{for(var n in o)b(r,n,{get:o[n],enumerable:!0})},C=(r,o,n,t)=>{if(o&&typeof o=="object"||typeof o=="function")for(let e of T(o))!N.call(r,e)&&e!==n&&b(r,e,{get:()=>o[e],enumerable:!(t=A(o,e))||t.enumerable});return r};var D=r=>C(b({},"__esModule",{value:!0}),r);var L={};E(L,{default:()=>f});module.exports=D(L);var c=require("obsidian"),F={max:"10",name:"foldernumber",recursive:!1},f=class extends c.Plugin{constructor(){super(...arguments);this.elObserver=new MutationObserver(n=>{n.forEach(t=>{t.type==="childList"&&(t.addedNodes.forEach(e=>{e instanceof Element&&e.matches(".nav-folder")&&this.applycolorinfo()}),t.removedNodes.forEach(e=>{e instanceof Element&&e.matches(".nav-folder")&&this.applycolorinfo()}))})})}applycolorinfo(){let n=this.app.vault.getAllFolders(),t=[],e=[],l={},p=[],u=[],m={},w=`data-${this.settings.name}`,S=[],x=Number(this.settings.max);for(let s of n)if(s.parent)if(s.parent.path=="/")e.push(s.name.toLowerCase()),l[s.name.toLowerCase()]=s.name;else{u.push(s.path),m[s.path.toLowerCase()]=s.path;let a=s.path.lastIndexOf(s.name),i=s.path.substring(0,a);p.includes(i)||p.push(i)}e.sort();let d=0;for(let s of e)d++,d>x&&(d=1),t.push({path:l[s],num:d});p.sort((s,a)=>a.length-s.length);for(let s of p){let a=[],i=u.length-1;for(let h=i;h>=0;h--){let y=u[h];y.startsWith(s)&&y.length>s.length&&(a.push(y.toLowerCase()),u.splice(h,1))}a.sort();let g=0;for(let h of a)g++,g>x&&(g=1),this.settings.recursive?t.push({path:m[h],num:g}):S.push(m[h])}for(let s of t){let a=document.querySelector(`[data-path="${s.path}"]`);if(!a)continue;let i=a.parentElement;i&&i.setAttribute(w,s.num.toString())}for(let s of S){let a=document.querySelector(`[data-path="${s}"]`);if(!a)continue;let i=a.parentElement;i&&i.removeAttribute(w)}}async onload(){await this.loadSettings(),this.applycolorinfo(),this.app.workspace.onLayoutReady(()=>{let n=document.querySelector(".nav-files-container");if(!n)return;let t={childList:!0,subtree:!0};this.elObserver.observe(n,t)}),this.addSettingTab(new v(this.app,this))}onunload(){this.elObserver.disconnect();let n=this.app.vault.getAllFolders();for(let t of n){let e=document.querySelector(`[data-path="${t.path}"]`);if(!e)continue;let l=e.parentElement;l&&l.removeAttribute(`data-${this.settings.name}`)}}async loadSettings(){this.settings=Object.assign({},F,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},v=class extends c.PluginSettingTab{constructor(n,t){super(n,t);this.plugin=t}display(){let{containerEl:n}=this;n.empty(),new c.Setting(n).setName("Number of colors").setDesc("The maximum number of colors your rainbow folders cycle through before repeating.").addText(t=>t.setPlaceholder("10").setValue(this.plugin.settings.max).onChange(async e=>{let l=parseInt(e);isNaN(l)&&(l=1),this.plugin.settings.max=l.toString(),this.plugin.applycolorinfo(),await this.plugin.saveSettings()})),new c.Setting(n).setName("Attribute name").setDesc("The name of the attribute that will be added to the element. May need a restart to see changes.").addText(t=>t.setPlaceholder("foldernumber").setValue(this.plugin.settings.name).onChange(async e=>{this.plugin.settings.name=e,await this.plugin.saveSettings()})),new c.Setting(n).setName("Apply recursively").setDesc("Toggle on to also apply the new attribute so subfolders.").addToggle(t=>t.setValue(this.plugin.settings.recursive).onChange(async e=>{this.plugin.settings.recursive=e,this.plugin.applycolorinfo(),await this.plugin.saveSettings()}))}};
