/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var y=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var E=Object.prototype.hasOwnProperty;var N=(r,i)=>{for(var n in i)y(r,n,{get:i[n],enumerable:!0})},D=(r,i,n,e)=>{if(i&&typeof i=="object"||typeof i=="function")for(let t of T(i))!E.call(r,t)&&t!==n&&y(r,t,{get:()=>i[t],enumerable:!(e=A(i,t))||e.enumerable});return r};var O=r=>D(y({},"__esModule",{value:!0}),r);var L={};N(L,{default:()=>g});module.exports=O(L);var c=require("obsidian"),C={max:"10",name:"foldernumber",recursive:!1},g=class extends c.Plugin{constructor(){super(...arguments);this.elObserver=new MutationObserver(n=>{n.forEach(e=>{e.type==="childList"&&(e.addedNodes.forEach(t=>{t instanceof Element&&t.matches(".nav-folder")&&this.applycolorinfo()}),e.removedNodes.forEach(t=>{t instanceof Element&&t.matches(".nav-folder")&&this.applycolorinfo()}))})});this.attrObserver=new MutationObserver(n=>{n.forEach(e=>{e.type==="attributes"&&this.applycolorinfo()})})}applycolorinfo(){let n=this.app.vault.getAllFolders(),e=[],t=[],l={},p=[],u=[],m={},w=`data-${this.settings.name}`,S=[],x=Number(this.settings.max);for(let s of n)if(s.parent)if(s.parent.path=="/")t.push(s.name.toLowerCase()),l[s.name.toLowerCase()]=s.name;else{u.push(s.path),m[s.path.toLowerCase()]=s.path;let a=s.path.lastIndexOf(s.name),o=s.path.substring(0,a);p.includes(o)||p.push(o)}t.sort();let d=0;for(let s of t)d++,d>x&&(d=1),e.push({path:l[s],num:d});p.sort((s,a)=>a.length-s.length);for(let s of p){let a=[],o=u.length-1;for(let h=o;h>=0;h--){let b=u[h];b.startsWith(s)&&b.length>s.length&&(a.push(b.toLowerCase()),u.splice(h,1))}a.sort();let f=0;for(let h of a)f++,f>x&&(f=1),this.settings.recursive?e.push({path:m[h],num:f}):S.push(m[h])}for(let s of e){let a=document.querySelector(`[data-path="${s.path}"]`);if(!a)continue;let o=a.parentElement;o&&o.setAttribute(w,s.num.toString())}for(let s of S){let a=document.querySelector(`[data-path="${s}"]`);if(!a)continue;let o=a.parentElement;o&&o.removeAttribute(w)}}async onload(){await this.loadSettings(),this.applycolorinfo(),this.app.workspace.onLayoutReady(()=>{let n=document.querySelector(".nav-files-container");n&&this.elObserver.observe(n,{childList:!0,subtree:!0});let e=document.querySelector(".workspace-drawer.mod-left");e&&this.attrObserver.observe(e,{attributes:!0,childList:!1,subtree:!1})}),this.addSettingTab(new v(this.app,this))}onunload(){this.elObserver.disconnect(),this.attrObserver.disconnect();let n=this.app.vault.getAllFolders();for(let e of n){let t=document.querySelector(`[data-path="${e.path}"]`);if(!t)continue;let l=t.parentElement;l&&l.removeAttribute(`data-${this.settings.name}`)}}async loadSettings(){this.settings=Object.assign({},C,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},v=class extends c.PluginSettingTab{constructor(n,e){super(n,e);this.plugin=e}display(){let{containerEl:n}=this;n.empty(),new c.Setting(n).setName("Number of colors").setDesc("The maximum number of colors your rainbow folders cycle through before repeating.").addText(e=>e.setPlaceholder("10").setValue(this.plugin.settings.max).onChange(async t=>{let l=parseInt(t);isNaN(l)&&(l=1),this.plugin.settings.max=l.toString(),this.plugin.applycolorinfo(),await this.plugin.saveSettings()})),new c.Setting(n).setName("Attribute name").setDesc("The name of the attribute that will be added to the element. May need a restart to see changes.").addText(e=>e.setPlaceholder("foldernumber").setValue(this.plugin.settings.name).onChange(async t=>{this.plugin.settings.name=t,await this.plugin.saveSettings()})),new c.Setting(n).setName("Apply recursively").setDesc("Toggle on to also apply the new attribute so subfolders.").addToggle(e=>e.setValue(this.plugin.settings.recursive).onChange(async t=>{this.plugin.settings.recursive=t,this.plugin.applycolorinfo(),await this.plugin.saveSettings()}))}};
